initial_state <- c(S=99990, E=0, I=10, R=0, M=0)
times <- 0:365
model_ld <- ode(initial_state, times, SEIR_lockdown, params)
summary(model_ld)
matplot(
model_ld,
type="l",
lty=1,
main="SEIR model (with intervention)",
xlab="Time"
)
model_ld <- ode(initial_state, times, SEIR_lockdown, params)
# ============================= B ====================
SEIR_lockdown <- function(time, current_state, params){
with(as.list(c(current_state, params)),{
beta = ifelse(
(time <= start_lockdown || time >= end_lockdown),
0.5, 0
)
N <- S+E+I+R
dS <- -(beta*S*I)/N
dE <- (beta*S*I)/N - sigma*E
dI <- sigma*E - gamma*I - mu*I
dR <- gamma*I
dM <- mu*I
return(list(c(dS, dE, dI, dR, dM)))
})
}
params <- c(
sigma=1,
gamma=0,
mu=0,
start_lockdown=90,
end_lockdown=100
)
initial_state <- c(S=99990, E=0, I=10, R=0, M=0)
times <- 0:365
model_ld <- ode(initial_state, times, SEIR_lockdown, params)
summary(model_ld)
matplot(
model_ld,
type="l",
lty=1,
main="SEIR model (with intervention)",
xlab="Time"
)
legend <- colnames(model_ld)[2:6]
legend("right", legend=legend, col=2:6, lty = 1)
# ============================= C ====================
SEIR <- function(time, current_state, params){
with(as.list(c(current_state, params)),{
N <- S+E+I+R
dS <- -(beta*S*I)/N
dE <- (beta*S*I)/N - sigma*E
dI <- sigma*E - gamma*I - mu*I
dR <- gamma*I
dM <- mu*I
return(list(c(dS, dE, dI, dR, dM)))
})
}
model_ld <- ode(initial_state, times, SEIR_lockdown, params_ld)
params_ld <- c(
sigma=1,
gamma=0,
mu=0,
start_lockdown=90,
end_lockdown=100
)
initial_state <- c(S=99990, E=0, I=10, R=0, M=0)
times <- 0:365
model_ld <- ode(initial_state, times, SEIR_lockdown, params_ld)
summary(model_ld)
matplot(
model_ld,
type="l",
lty=1,
main="SEIR model (with intervention)",
xlab="Time"
)
legend <- colnames(model_ld)[2:6]
legend("right", legend=legend, col=2:6, lty = 1)
# ============================= C ====================
SEIR <- function(time, current_state, params){
with(as.list(c(current_state, params)),{
N <- S+E+I+R
dS <- -(beta*S*I)/N
dE <- (beta*S*I)/N - sigma*E
dI <- sigma*E - gamma*I - mu*I
dR <- gamma*I
dM <- mu*I
return(list(c(dS, dE, dI, dR, dM)))
})
}
params_m <- c(beta=1, sigma=1, gamma=0, mu=0.1)
# R0 = beta/gamma
# beta = 2  - srednia ilosc kontaktow zakaznych dla 1 osoby
# sigma = 1  - po 1 dniu od kontaktu z chorym osoba staje sie zakazna
initial_state <- c(S=99990, E=0, I=10, R=0, M=0)
times <- 0:365
model_m <- ode(initial_state, times, SEIR, params)
model_m <- ode(initial_state, times, SEIR, params_m)
summary(model)
matplot(model, type="l", lty=1, main="SEIR model", xlab="Time")
legend <- colnames(model)[2:6]
legend("right", legend=legend, col=2:6, lty = 1)
summary(model_m)
matplot(model_m, type="l", lty=1, main="SEIR model", xlab="Time")
legend <- colnames(model_m)[2:6]
legend("right", legend=legend, col=2:6, lty = 1)
params_m <- c(beta=1, sigma=1, gamma=0, mu=0.04)
# R0 = beta/gamma
# beta = 2  - srednia ilosc kontaktow zakaznych dla 1 osoby
# sigma = 1  - po 1 dniu od kontaktu z chorym osoba staje sie zakazna
initial_state <- c(S=99990, E=0, I=10, R=0, M=0)
times <- 0:365
model_m <- ode(initial_state, times, SEIR, params_m)
summary(model_m)
matplot(model_m, type="l", lty=1, main="SEIR model", xlab="Time")
legend <- colnames(model_m)[2:6]
legend("right", legend=legend, col=2:6, lty = 1)
params_m <- c(beta=1, sigma=1, gamma=0, mu=0.1)
# R0 = beta/gamma
# beta = 2  - srednia ilosc kontaktow zakaznych dla 1 osoby
# sigma = 1  - po 1 dniu od kontaktu z chorym osoba staje sie zakazna
initial_state <- c(S=99990, E=0, I=10, R=0, M=0)
params_m <- c(beta=0.05, sigma=1, gamma=0, mu=0.1)
# R0 = beta/gamma
# beta = 2  - srednia ilosc kontaktow zakaznych dla 1 osoby
# sigma = 1  - po 1 dniu od kontaktu z chorym osoba staje sie zakazna
initial_state <- c(S=99990, E=0, I=10, R=0, M=0)
times <- 0:365
model_m <- ode(initial_state, times, SEIR, params_m)
summary(model_m)
matplot(model_m, type="l", lty=1, main="SEIR model", xlab="Time")
legend <- colnames(model_m)[2:6]
legend("right", legend=legend, col=2:6, lty = 1)
model_m
model_m <- ode(initial_state, times, SEIR, params_m)
summary(model_m)
params_m <- c(beta=1, sigma=1, gamma=0, mu=0.1)
# R0 = beta/gamma
# beta = 2  - srednia ilosc kontaktow zakaznych dla 1 osoby
# sigma = 1  - po 1 dniu od kontaktu z chorym osoba staje sie zakazna
initial_state <- c(S=99990, E=0, I=10, R=0, M=0)
times <- 0:365
model_m <- ode(initial_state, times, SEIR, params_m)
summary(model_m)
model_m
matplot(model_m, type="l", lty=1, main="SEIR model", xlab="Time")
legend <- colnames(model_m)[2:6]
legend("right", legend=legend, col=2:6, lty = 1)
params_m <- c(beta=2, sigma=1, gamma=0, mu=0.1)
# R0 = beta/gamma
# beta = 2  - srednia ilosc kontaktow zakaznych dla 1 osoby
# sigma = 1  - po 1 dniu od kontaktu z chorym osoba staje sie zakazna
initial_state <- c(S=99990, E=0, I=10, R=0, M=0)
times <- 0:365
model_m <- ode(initial_state, times, SEIR, params_m)
summary(model_m)
model_m
matplot(model_m, type="l", lty=1, main="SEIR model", xlab="Time")
params_m <- c(beta=0.09, sigma=1, gamma=0, mu=0.1)
# R0 = beta/gamma
# beta = 2  - srednia ilosc kontaktow zakaznych dla 1 osoby
# sigma = 1  - po 1 dniu od kontaktu z chorym osoba staje sie zakazna
initial_state <- c(S=99990, E=0, I=10, R=0, M=0)
times <- 0:365
model_m <- ode(initial_state, times, SEIR, params_m)
summary(model_m)
model_m
matplot(model_m, type="l", lty=1, main="SEIR model", xlab="Time")
params_m <- c(beta=1, sigma=1, gamma=0, mu=0.1)
# R0 = beta/gamma
# beta = 2  - srednia ilosc kontaktow zakaznych dla 1 osoby
# sigma = 1  - po 1 dniu od kontaktu z chorym osoba staje sie zakazna
initial_state <- c(S=99990, E=0, I=10, R=0, M=0)
times <- 0:365
model_m <- ode(initial_state, times, SEIR, params_m)
summary(model_m)
model_m
matplot(model_m, type="l", lty=1, main="SEIR model", xlab="Time")
legend <- colnames(model_m)[2:6]
legend("right", legend=legend, col=2:6, lty = 1)
M <-matrix(nrow=100000,ncol=100, 'Z')
df_M <- as.data.frame(M)
names(df_M) <- paste("dzien", 1:ncol(df_M), sep="_")
mat_M <- as.matrix(df_M)
# Ch - chory
# Z - zdrowy
mat_M[,1][sample(nrow(mat_M),1000)]<- 'Ch'
df1 <-as.data.frame(matrix(sample(1:20,30,replace=TRUE),ncol=10))
View(df1)
df1 <-as.data.frame(matrix(sample(1:20,30,replace=TRUE),ncol=3))
View(df1)
df1 <-as.data.frame(matrix(sample(1:12,30,replace=TRUE),ncol=3))
names(df1) <- c("przejscie", "miesiac", "liczba_osob")
View(df1)
df2 <-as.data.frame(matrix(sample(1:12,30,replace=TRUE),ncol=3))
names(df2) <- c("przejscie", "miesiac", "liczba_osob")
df3 <-as.data.frame(matrix(sample(1:12,30,replace=TRUE),ncol=3))
names(df3) <- c("przejscie", "miesiac", "liczba_osob")
df4 <-as.data.frame(matrix(sample(1:12,30,replace=TRUE),ncol=3))
names(df4) <- c("przejscie", "miesiac", "liczba_osob")
View(df1)
View(df2)
View(df3)
View(df4)
df1 <-as.data.frame(matrix(sample(1:12,30,replace=TRUE),ncol=3))
names(df1) <- c("przejscie", "miesiac", "liczba_osob")
df2 <-as.data.frame(matrix(sample(1:12,48,replace=TRUE),ncol=3))
names(df2) <- c("przejscie", "miesiac", "liczba_osob")
df3 <-as.data.frame(matrix(sample(1:12,35,replace=TRUE),ncol=3))
names(df3) <- c("przejscie", "miesiac", "liczba_osob")
df4 <-as.data.frame(matrix(sample(1:12,40,replace=TRUE),ncol=3))
names(df4) <- c("przejscie", "miesiac", "liczba_osob")
df4 <-as.data.frame(matrix(sample(1:12,42,replace=TRUE),ncol=3))
names(df4) <- c("przejscie", "miesiac", "liczba_osob")
df3 <-as.data.frame(matrix(sample(1:12,36,replace=TRUE),ncol=3))
names(df3) <- c("przejscie", "miesiac", "liczba_osob")
my_list <- list(df1, df2, df3, df4)
View(my_list)
div <- my_list[[i]]/2
View(my_list[[1]])
wyniki = data.frame(matrix(nrow = 4, ncol = 2))
View(wyniki)
names(wyniki) <- c("sum1", "sum2")
for (i in my_list) {
for(i in 1:nrow(my_list)) {
df[i] <- my_list[[i]]
wyniki[i,1] <- sum(df[,1])
}
}
for(row in 1:nrow(my_list[[i]])) {
for(r in 1:nrow(wyniki)) {
df[i] <- my_list[[i]]
wyniki[r,1] <- sum(df[row,3])
wyniki[r,2] <- sum(df[row,3])
}
}
my_list[[i]]
my_list[[1]]
my_list[[2]]
for (i in my_list) {
for(row in 1:nrow(my_list[[i]])) {
for(r in 1:nrow(wyniki)) {
df[i] <- my_list[[i]]
wyniki[r,1] <- sum(df[row,3])
wyniki[r,2] <- sum(df[row,3])
}
}
}
for (mat in my_list) {
for(row in 1:nrow(my_list[[i]])) {
for(r in 1:nrow(wyniki)) {
df[mat] <- my_list[[mat]]
wyniki[r,1] <- sum(df[mat][row,3])
wyniki[r,2] <- sum(df[mat][row,3])
}
}
}
for (mat in my_list) {
for(row in 1:nrow(my_list[[mat]])) {
for(r in 1:nrow(wyniki)) {
df[mat] <- my_list[[mat]]
wyniki[r,1] <- sum(df[mat][row,3])
wyniki[r,2] <- sum(df[mat][row,3])
}
}
}
for (i in my_list) {
for(row in 1:nrow(my_list[[i]])) {
for(r in 1:nrow(wyniki)) {
wyniki[r,1] <- sum(my_list[[i]]$liczba_osob)
wyniki[r,2] <- sum(my_list[[i]]$liczba_osob)
}
}
}
for (i in my_list) {
for(r in 1:nrow(wyniki)) {
wyniki[r,1] <- sum(my_list[[i]]$liczba_osob)
wyniki[r,2] <- sum(my_list[[i]]$liczba_osob)
}
}
install.packages("C:/Users/mateu/Downloads/inequalityMeasure.R", repos = NULL)
install.packages("C:/Users/mateu/Downloads/wINEQ/data/Tourism.rda", repos = NULL)
install.packages("C:/Users/mateu/Downloads/wINEQ_1.0.1.tar.gz", repos = NULL, type = "source")
remove.packages("wINEQ")
install.packages("C:/Users/mateu/Downloads/wINEQ_1.0.1.tar.gz", repos = NULL, type = "source")
library(wINEQ)
remove.packages("wINEQ")
install.packages("C:/Users/mateu/Downloads/wINEQ_1.0.1.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/mateu/Downloads/wINEQ_1.0.1.tar.gz", repos = NULL, type = "source")
library(wINEQ)
data("Tourism")
force(Tourism)
View(Tourism)
if (interactive()) {
ui <- fluidPage(
downloadButton("downloadData", "Download")
)
server <- function(input, output) {
# Our dataset
data <- mtcars
output$downloadData <- downloadHandler(
filename = function() {
paste("data-", Sys.Date(), ".csv", sep="")
},
content = function(file) {
write.csv(data, file)
}
)
}
shinyApp(ui, server)
}
library(shiny)
if (interactive()) {
ui <- fluidPage(
downloadButton("downloadData", "Download")
)
server <- function(input, output) {
# Our dataset
data <- mtcars
output$downloadData <- downloadHandler(
filename = function() {
paste("data-", Sys.Date(), ".csv", sep="")
},
content = function(file) {
write.csv(data, file)
}
)
}
shinyApp(ui, server)
}
ui <- fluidPage(
downloadButton("downloadData", "Download")
)
server <- function(input, output) {
# Our dataset
data <- mtcars
output$downloadData <- downloadHandler(
filename = function() {
paste("data-", Sys.Date(), ".csv", sep="")
},
content = function(file) {
write.csv(data, file)
}
)
}
shinyApp(ui, server)
Tourism %>%
X=Totalexpenditure[1:30]
Tourism %>%
X='Total expenditure'[1:30]
W='Sample weight'[1:30]
library(dplyr)
data(Tourism)
Tourism %>%
X='Total expenditure'[1:30]
library(tidyverse)
library(bslib)
Tourism %>%
X='Total expenditure'[1:30]
library(magrittr)
Tourism %>%
X='Total expenditure'[1:30]
W='Sample weight'[1:30]
l
Tourism %>%
X='Total expenditure'[1:30]
X='Total expenditure'[1:30]
W='Sample weight'[1:30]
data(Tourism)
X='Total expenditure'[1:30]
W='Sample weight'[1:30]
AF(X,W)
X=as.data.frame('Total expenditure'[1:30])
W='Sample weight'[1:30]
AF(X,W)
W=as.data.frame('Sample weight'[1:30])
AF(X,W)
?AF
X=Tourism$`Total expenditure`
W=Tourism$`Sample weight`
AF(X,W)
X=Tourism$`Expenditure on transport`[1:30]
W=Toursim$`Sample weight`[1:30]
AF(X,W)
W=Tourism$`Sample weight`[1:30]
AF(X,W)
library(wINEQ)
library(magrittr)
data(Tourism)
X=Tourism$`Total expenditure`
W=Tourism$`Sample weight`
AF(X,W)
data(Tourism)
X=Tourism$`Expenditure on transport`[1:30]
W=Tourism$`Sample weight`[1:30]
AF(X,W)
X=Tourism$Expenditure on transport[1:30]
X=c(1,2,3,4,5,6,7,8,9)
W=c(2,5,6,7,3,4,5,2,5)
Atkinson(X,W)
#'
data(Tourism)
X= Tourism$`Total expenditure`
W=Tourism$`Sample weight`
Atkinson(X,W)
#'
#' data(Tourism)
X=Tourism$`Expenditure on transport`[1:30]
W=Tourism$`Sample weight`[1:30]
Atkinson(X,W)
W=Tourism$`Sample weight`[1:33]
Atkinson(X,W)
#'
#' data(Tourism)
X=Tourism$`Expenditure on transport`[1:30]
W=Tourism$`Sample weight`[1:33]
Atkinson(X,W)
#'
#'
X= Tourism$`Total expenditure`
W=Tourism$`Sample weight`
Kolm(X,W, scale ="None")
Kolm(X,W, scale ="Standardization")
#changing units has an impact on the final result
X=1:9
W=c(2,5,6,7,3,4,5,2,5)
Kolm(X,W, scale ="None")
X<-X*10
Kolm(X,W, scale ="None")
X
W=c(2,5,6,7,3,4,2,5)
Kolm(X,W, scale ="None")
#================================= BIBLIOTEKI ===============================================================
#library(ggplot2)
library(openxlsx)
library(dplyr)
library(tidyverse)
#library(gridExtra)
#library(data.table)
#============================== IMPORT DANYCH I WSTEPNA OBRÓBKA ============================================
setwd("C:/Users/mateu/OneDrive/Pulpit/Projekt_inżynierski/")
Wskaznik_HDI <- read.xlsx("HDI_INDEX_PROJ.xlsx", sheet = 1, skipEmptyRows = FALSE)
PKB_na_mieszkanca <- read.xlsx("GDP_PER_CAPITA_PROJ.xlsx", sheet = 1, skipEmptyRows = FALSE)
Wspolczynnik_Giniego <- read.xlsx("GINI_INDEX_PROJ.xlsx", sheet = 1, skipEmptyRows = FALSE)
Smiertelnosc_niemowlat <- read.xlsx("INFANT_MORTALITY_RATE_PROJ.xlsx", sheet = 1, skipEmptyRows = FALSE)
Ogolne_szczescie <- read.xlsx("HAPPINESS_SCORE_PROJ.xlsx", sheet = 1, skipEmptyRows = FALSE)
# Dla danych "Ogolne_szczescie" jest oddzielny plik R, w którym został utworzony plik Excel - HAPPINESS_SCORE_PROJ.xlsx.
names(Wskaznik_HDI) <- c("region", "rok.2012","rok.2013",
"rok.2014","rok.2015","rok.2016","rok.2017","rok.2018","rok.2019")
names(PKB_na_mieszkanca) <- c("region", "rok.2010","rok.2011","rok.2012","rok.2013",
"rok.2014","rok.2015","rok.2016","rok.2017","rok.2018","rok.2019",
"rok.2020","rok.2021")
names(Wspolczynnik_Giniego) <- c("region","rok.2009", "rok.2010","rok.2011","rok.2012","rok.2013",
"rok.2014","rok.2015","rok.2016","rok.2017","rok.2018","rok.2019",
"rok.2020")
names(Smiertelnosc_niemowlat) <- c("region","rok.2009", "rok.2010","rok.2011","rok.2012","rok.2013",
"rok.2014","rok.2015","rok.2016","rok.2017","rok.2018","rok.2019")
PKB_na_mieszkanca <- select(PKB_na_mieszkanca,c("region","rok.2012","rok.2013","rok.2014","rok.2015","rok.2016","rok.2017","rok.2018","rok.2019","rok.2020","rok.2021"))
Wspolczynnik_Giniego <- select(Wspolczynnik_Giniego,c("region","rok.2012","rok.2013","rok.2014","rok.2015","rok.2016","rok.2017","rok.2018","rok.2019","rok.2020"))
Smiertelnosc_niemowlat <- select(Smiertelnosc_niemowlat,c("region","rok.2012","rok.2013","rok.2014","rok.2015","rok.2016","rok.2017","rok.2018","rok.2019"))
Wskaznik_HDI$region <- gsub("United Kingdom", "UK", Wskaznik_HDI$region)
PKB_na_mieszkanca$region <- gsub("United Kingdom", "UK", PKB_na_mieszkanca$region)
Wspolczynnik_Giniego$region <- gsub("United Kingdom", "UK", Wspolczynnik_Giniego$region)
Smiertelnosc_niemowlat$region <- gsub("United Kingdom", "UK", Smiertelnosc_niemowlat$region)
Ogolne_szczescie$region <- gsub("United Kingdom", "UK",Ogolne_szczescie$region)
PKB_na_mieszkanca$region <- gsub("Czechia", "Czech Republic", PKB_na_mieszkanca$region)
Wspolczynnik_Giniego$region <- gsub("Czechia", "Czech Republic", Wspolczynnik_Giniego$region)
Smiertelnosc_niemowlat$region <- gsub("Czechia", "Czech Republic", Smiertelnosc_niemowlat$region)
Ogolne_szczescie$region <- gsub("Macedonia", "North Macedonia",Ogolne_szczescie$region)
Wskaznik_HDI$region <- gsub("Bosnia Herzegovina", "Bosnia and Herzegovina", Wskaznik_HDI$region)
Wspolczynnik_Giniego <- Wspolczynnik_Giniego[-37, ]
#Usuwnie niewłaściwych państw lub państw z brakami danych
Wskaznik_HDI <- Wskaznik_HDI[-c(3,5,17,30,37), ]
rownames(Wskaznik_HDI) <- 1:nrow(Wskaznik_HDI)
Wskaznik_HDI[,2:9] <- round(Wskaznik_HDI[,2:9], 3)
Smiertelnosc_niemowlat <- Smiertelnosc_niemowlat[-c(38,40,42,43,44,46,47,48), ]
rownames(Smiertelnosc_niemowlat) <- 1:nrow(Smiertelnosc_niemowlat)
Ogolne_szczescie <- Ogolne_szczescie[-c(26,28),]
rownames(Ogolne_szczescie) <- 1:nrow(Ogolne_szczescie)
Ogolne_szczescie[,2:6] <- round(Ogolne_szczescie[,2:6], 3)    # zaokr?ąglanie wszystkich kolumn do 3 miejsc po przecinku
# Tworzymy dodatkową ramkę danych dla "Ogolne_szczescie" w celu usprawnienia działania wykresów w aplikacji
Ogolne_szczescie_2012_2019 <- Ogolne_szczescie %>%
add_column(
rok.2012 = "NA",   #dodawanie 0 kolumn
rok.2013 = "NA",
rok.2014 = "NA", .after="region")
Ogolne_szczescie_2012_2019.36 <- Ogolne_szczescie_2012_2019[-c(26,27,34,36),]
rownames(Ogolne_szczescie_2012_2019.36) <- 1:nrow(Ogolne_szczescie_2012_2019.36)
Smiertelnosc_niemowlat.36 <- Smiertelnosc_niemowlat[-c(29,34,38,39),]
rownames(Smiertelnosc_niemowlat.36) <- 1:nrow(Smiertelnosc_niemowlat.36)
Wskaznik_HDI.36 <- Wskaznik_HDI[-c(21,26,28,32),]
rownames(Wskaznik_HDI.36) <- 1:nrow(Wskaznik_HDI.36)
shiny::runApp('shiny_application')
runApp('shiny_application')
runApp('shiny_application')
runApp('shiny_application')
runApp('shiny_application')
runApp('shiny_application')
runApp('shiny_application')
runApp('shiny_application')
runApp('shiny_application')
View(Ogolne_szczescie)
View(Ogolne_szczescie_2012_2019)
View(PKB_na_mieszkanca)
View(Smiertelnosc_niemowlat)
View(Wspolczynnik_Giniego)
View(Wskaznik_HDI)
runApp('shiny_application')
runApp('shiny_application')
